int min(int a,int b,int c){
        int x = a<b?a:b;
        return x<c?x:c;
        }
    
    
    int dist(string s,string g,int m,int n){
        int dp[m + 1][n + 1];
    for (int i = 0; i <= m; i++) {
        for (int j = 0; j <= n; j++) {
            
            if (i == 0)
                dp[i][j] = j; 
 
            else if (j == 0)
                dp[i][j] = i;
            else if (s[i - 1] == g[j - 1])
                dp[i][j] = dp[i - 1][j - 1];
 
            else
                dp[i][j]
                    = 1
                      + min(dp[i][j - 1], // Insert
                            dp[i - 1][j], // Remove
                            dp[i - 1][j - 1]); // Replace
        }
    }
 
    return dp[m][n];
}
int Solution::minDistance(string A, string B) {
     return dist(A,B,A.length(),B.length());
}
