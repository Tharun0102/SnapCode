bool dfs(int a,int b,vector<vector<int>> &g,vector<bool> &lookup)
{
    lookup[a]=1;
    if(a==b)return 1;
    for(auto i:g[a])
    {
        if(lookup[i]==0)
        {
            if(dfs(i,b,g,lookup))
            return 1;
        }
    }
    return 0;
}
int Solution::solve(vector<int> &A, vector<int> &B, vector<vector<int> > &C) {
    int n=A.size();
    vector<vector<int>> g(n+1);
    for(int i=0;i<C.size();i++)
    {
        g[A[C[i][0]-1]].push_back(A[C[i][1]-1]);
        g[A[C[i][1]-1]].push_back(A[C[i][0]-1]);
    }
    for(int i=0;i<n;i++)
    {
        if(A[i]==B[i])
        continue;
        vector<bool> lookup(n+1,0);
        if(dfs(A[i],B[i],g,lookup))
        continue;
        else
        return 0;
    }
    return 1;
}
