/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
stack<TreeNode *> s;
BSTIterator::BSTIterator(TreeNode *root) 
{
    while(root != NULL)
    {
        s.push(root);
        root = root->left;
    }
}

/** @return whether we have a next smallest number */
bool BSTIterator::hasNext() {
    return !s.empty();
}

/** @return the next smallest number */
int BSTIterator::next() 
{
    int temp = s.top()->val;
    
    TreeNode *curr = s.top()->right;
    s.pop();
    if(curr != NULL)
    {
        while(curr != NULL)
        {
            s.push(curr);
            curr = curr->left;
        }
    }
    return temp;
}

/**
 * Your BSTIterator will be called like this:
 * BSTIterator i = BSTIterator(root);
 * while (i.hasNext()) cout << i.next();
 */
